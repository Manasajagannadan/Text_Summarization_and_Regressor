# -*- coding: utf-8 -*-
"""Regression Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L_8SzJK_aHbaWBS47rogpt1Ul-BSQAMq
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Working with Regression Model for better Accuracy"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

plt.style.use("ggplot")

"""# Data is converted into numerical values using "DictVectorizer". Below applied"""

from sklearn.feature_extraction import DictVectorizer

def prepare_data(data, train=True, dv=None):
    cat_keys = [k for k in data.keys() if k.startswith("cat")]
    cat_x = data[cat_keys]
    cont_keys = [k for k in data.keys() if k.startswith("cont")]
    cont_x = data[cont_keys]
    if train:
        y = data["loss"]
    else:
        y = None
    cat_x_dict = [r[1].to_dict() for r in cat_x.iterrows()]
    del cat_x
    if dv is None:
        dv = DictVectorizer().fit(cat_x_dict)
    cat_cont_x = dv.transform(cat_x_dict).toarray()
    del cat_x_dict
    return np.column_stack([cat_cont_x, cont_x]), y, dv

data = pd.read_csv("/content/drive/My Drive/train.csv")
train = pd.read_csv("/content/drive/My Drive/train.csv")
prepare_data(data, train=True, dv=None)

train_data = pd.read_csv("/content/drive/My Drive/train.csv").set_index("id")
train_data.head(5)

train_x, train_y, dv = prepare_data(train_data)

test_data = pd.read_csv("/content/drive/My Drive/test.csv").set_index("id")
test_x, _, _ = prepare_data(test_data, False, dv)

from keras.models import Sequential
from keras.layers import Activation, Dense, Dropout
from keras.objectives import MSE, MAE
from keras.callbacks import EarlyStopping

"""# Define MLP Regression Model and try the compiling it against MAE loss"""

model = Sequential()
model.add(Dense(input_dim=train_x.shape[1], output_dim=256))
model.add(Activation("tanh"))
model.add(Dropout(0.50))
model.add(Dense(output_dim=128))
model.add(Activation("relu"))
model.add(Dropout(0.50))
model.add(Dense(output_dim=64))
model.add(Activation("relu"))
model.add(Dropout(0.50))
model.add(Dense(output_dim=1))
model.compile("nadam", "mae")

early_stopping = EarlyStopping(monitor='val_loss', patience=10)
train_log = model.fit(train_x, train_y.values, batch_size=256, nb_epoch=40, validation_split=0.1, verbose=2, callbacks=[early_stopping])

plt.plot(train_log.history["loss"], label="loss")
plt.plot(train_log.history["val_loss"], label="val_loss")
plt.legend()

pred_y = model.predict(test_x)
result = pd.DataFrame(pred_y, index=test_data.index, columns=["loss"])
result.to_csv("Result.csv")

